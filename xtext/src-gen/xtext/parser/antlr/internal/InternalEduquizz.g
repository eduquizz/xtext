/*
 * generated by Xtext 2.36.0
 */
grammar InternalEduquizz;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xtext.services.EduquizzGrammarAccess;

}

@parser::members {

 	private EduquizzGrammarAccess grammarAccess;

    public InternalEduquizzParser(TokenStream input, EduquizzGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Questionnaire";
   	}

   	@Override
   	protected EduquizzGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleQuestionnaire
entryRuleQuestionnaire returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuestionnaireRule()); }
	iv_ruleQuestionnaire=ruleQuestionnaire
	{ $current=$iv_ruleQuestionnaire.current; }
	EOF;

// Rule Questionnaire
ruleQuestionnaire returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Questionnaire'
		{
			newLeafNode(otherlv_0, grammarAccess.getQuestionnaireAccess().getQuestionnaireKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuestionnaireAccess().getNomEStringParserRuleCall_1_0());
				}
				lv_nom_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuestionnaireRule());
					}
					set(
						$current,
						"nom",
						lv_nom_1_0,
						"xtext.Eduquizz.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_2='RetourAutoris\u00E9'
			{
				newLeafNode(otherlv_2, grammarAccess.getQuestionnaireAccess().getRetourAutorisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionnaireAccess().getRetourAutoriseEBooleanParserRuleCall_2_1_0());
					}
					lv_retourAutorise_3_0=ruleEBoolean
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionnaireRule());
						}
						set(
							$current,
							"retourAutorise",
							lv_retourAutorise_3_0,
							"xtext.Eduquizz.EBoolean");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_4='M\u00E9langer'
			{
				newLeafNode(otherlv_4, grammarAccess.getQuestionnaireAccess().getMLangerKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionnaireAccess().getMelangeEBooleanParserRuleCall_3_1_0());
					}
					lv_melange_5_0=ruleEBoolean
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionnaireRule());
						}
						set(
							$current,
							"melange",
							lv_melange_5_0,
							"xtext.Eduquizz.EBoolean");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getQuestionnaireAccess().getQuestionQuestionParserRuleCall_4_0());
				}
				lv_question_6_0=ruleQuestion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuestionnaireRule());
					}
					add(
						$current,
						"question",
						lv_question_6_0,
						"xtext.Eduquizz.Question");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); }
	iv_ruleEBoolean=ruleEBoolean
	{ $current=$iv_ruleEBoolean.current.getText(); }
	EOF;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	iv_ruleQuestion=ruleQuestion
	{ $current=$iv_ruleQuestion.current; }
	EOF;

// Rule Question
ruleQuestion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Question'
		{
			newLeafNode(otherlv_0, grammarAccess.getQuestionAccess().getQuestionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuestionAccess().getEnnonceEStringParserRuleCall_1_0());
				}
				lv_ennonce_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuestionRule());
					}
					set(
						$current,
						"ennonce",
						lv_ennonce_1_0,
						"xtext.Eduquizz.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_reponsesMultiples_2_0='R\u00E9ponsesMultiples'
				{
					newLeafNode(lv_reponsesMultiples_2_0, grammarAccess.getQuestionAccess().getReponsesMultiplesRPonsesMultiplesKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuestionRule());
					}
					setWithLastConsumed($current, "reponsesMultiples", lv_reponsesMultiples_2_0 != null, "R\u00E9ponsesMultiples");
				}
			)
		)?
		(
			otherlv_3='Difficult\u00E9'
			{
				newLeafNode(otherlv_3, grammarAccess.getQuestionAccess().getDifficultKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionAccess().getDifficulteEIntParserRuleCall_3_1_0());
					}
					lv_difficulte_4_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionRule());
						}
						set(
							$current,
							"difficulte",
							lv_difficulte_4_0,
							"xtext.Eduquizz.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='Etiquettes'
			{
				newLeafNode(otherlv_5, grammarAccess.getQuestionAccess().getEtiquettesKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionAccess().getEtiquetteEtiquetteParserRuleCall_4_1_0());
					}
					lv_etiquette_6_0=ruleEtiquette
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionRule());
						}
						add(
							$current,
							"etiquette",
							lv_etiquette_6_0,
							"xtext.Eduquizz.Etiquette");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getQuestionAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getQuestionAccess().getEtiquetteEtiquetteParserRuleCall_4_2_1_0());
						}
						lv_etiquette_8_0=ruleEtiquette
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getQuestionRule());
							}
							add(
								$current,
								"etiquette",
								lv_etiquette_8_0,
								"xtext.Eduquizz.Etiquette");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getQuestionAccess().getReponseReponseParserRuleCall_5_0());
				}
				lv_reponse_9_0=ruleReponse
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuestionRule());
					}
					add(
						$current,
						"reponse",
						lv_reponse_9_0,
						"xtext.Eduquizz.Reponse");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEtiquette
entryRuleEtiquette returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEtiquetteRule()); }
	iv_ruleEtiquette=ruleEtiquette
	{ $current=$iv_ruleEtiquette.current; }
	EOF;

// Rule Etiquette
ruleEtiquette returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEtiquetteAccess().getEtiquetteAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEtiquetteAccess().getNomEStringParserRuleCall_1_0());
				}
				lv_nom_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEtiquetteRule());
					}
					set(
						$current,
						"nom",
						lv_nom_1_0,
						"xtext.Eduquizz.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleReponse
entryRuleReponse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReponseRule()); }
	iv_ruleReponse=ruleReponse
	{ $current=$iv_ruleReponse.current; }
	EOF;

// Rule Reponse
ruleReponse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReponseAccess().getReponseAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getReponseAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_estVraie_2_0='x'
				{
					newLeafNode(lv_estVraie_2_0, grammarAccess.getReponseAccess().getEstVraieXKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReponseRule());
					}
					setWithLastConsumed($current, "estVraie", lv_estVraie_2_0 != null, "x");
				}
			)
		)?
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getReponseAccess().getRightSquareBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReponseAccess().getTexteEStringParserRuleCall_4_0());
				}
				lv_texte_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReponseRule());
					}
					set(
						$current,
						"texte",
						lv_texte_4_0,
						"xtext.Eduquizz.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
