/*
 * generated by Xtext 2.36.0
 */
package xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import mm1.Etiquette;
import mm1.Mm1Package;
import mm1.Question;
import mm1.Questionnaire;
import mm1.Reponse;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import xtext.services.EduquizzGrammarAccess;

@SuppressWarnings("all")
public class EduquizzSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EduquizzGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Mm1Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Mm1Package.ETIQUETTE:
				sequence_Etiquette(context, (Etiquette) semanticObject); 
				return; 
			case Mm1Package.QUESTION:
				sequence_Question(context, (Question) semanticObject); 
				return; 
			case Mm1Package.QUESTIONNAIRE:
				sequence_Questionnaire(context, (Questionnaire) semanticObject); 
				return; 
			case Mm1Package.REPONSE:
				sequence_Reponse(context, (Reponse) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Etiquette returns Etiquette
	 *
	 * Constraint:
	 *     nom=EString?
	 * </pre>
	 */
	protected void sequence_Etiquette(ISerializationContext context, Etiquette semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Question returns Question
	 *
	 * Constraint:
	 *     (ennonce=EString? reponsesMultiples?='RÃ©ponsesMultiples'? difficulte=EInt? (etiquette+=Etiquette etiquette+=Etiquette*)? reponse+=Reponse+)
	 * </pre>
	 */
	protected void sequence_Question(ISerializationContext context, Question semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Questionnaire returns Questionnaire
	 *
	 * Constraint:
	 *     (nom=EString? retourAutorise=EBoolean? melange=EBoolean? question+=Question+)
	 * </pre>
	 */
	protected void sequence_Questionnaire(ISerializationContext context, Questionnaire semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Reponse returns Reponse
	 *
	 * Constraint:
	 *     (estVraie?='x'? texte=EString?)
	 * </pre>
	 */
	protected void sequence_Reponse(ISerializationContext context, Reponse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
