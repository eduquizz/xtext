/*
 * generated by Xtext 2.36.0
 */
package xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xtext.ide.contentassist.antlr.internal.InternalEduquizzParser;
import xtext.services.EduquizzGrammarAccess;

public class EduquizzParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(EduquizzGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, EduquizzGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getQuestionnaireAccess().getGroup(), "rule__Questionnaire__Group__0");
			builder.put(grammarAccess.getQuestionnaireAccess().getGroup_2(), "rule__Questionnaire__Group_2__0");
			builder.put(grammarAccess.getQuestionnaireAccess().getGroup_3(), "rule__Questionnaire__Group_3__0");
			builder.put(grammarAccess.getQuestionnaireAccess().getGroup_4(), "rule__Questionnaire__Group_4__0");
			builder.put(grammarAccess.getQuestionnaireAccess().getGroup_5(), "rule__Questionnaire__Group_5__0");
			builder.put(grammarAccess.getQuestionnaireAccess().getGroup_9(), "rule__Questionnaire__Group_9__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup(), "rule__Question__Group__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup_3(), "rule__Question__Group_3__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup_4(), "rule__Question__Group_4__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup_5(), "rule__Question__Group_5__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup_5_3(), "rule__Question__Group_5_3__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup_9(), "rule__Question__Group_9__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getEtiquetteAccess().getGroup(), "rule__Etiquette__Group__0");
			builder.put(grammarAccess.getEtiquetteAccess().getGroup_3(), "rule__Etiquette__Group_3__0");
			builder.put(grammarAccess.getReponseAccess().getGroup(), "rule__Reponse__Group__0");
			builder.put(grammarAccess.getReponseAccess().getGroup_4(), "rule__Reponse__Group_4__0");
			builder.put(grammarAccess.getQuestionnaireAccess().getNomAssignment_2_1(), "rule__Questionnaire__NomAssignment_2_1");
			builder.put(grammarAccess.getQuestionnaireAccess().getResultatAssignment_3_1(), "rule__Questionnaire__ResultatAssignment_3_1");
			builder.put(grammarAccess.getQuestionnaireAccess().getRetourAutoriseAssignment_4_1(), "rule__Questionnaire__RetourAutoriseAssignment_4_1");
			builder.put(grammarAccess.getQuestionnaireAccess().getMelangeAssignment_5_1(), "rule__Questionnaire__MelangeAssignment_5_1");
			builder.put(grammarAccess.getQuestionnaireAccess().getQuestionAssignment_8(), "rule__Questionnaire__QuestionAssignment_8");
			builder.put(grammarAccess.getQuestionnaireAccess().getQuestionAssignment_9_1(), "rule__Questionnaire__QuestionAssignment_9_1");
			builder.put(grammarAccess.getQuestionAccess().getReponsesMultiplesAssignment_0(), "rule__Question__ReponsesMultiplesAssignment_0");
			builder.put(grammarAccess.getQuestionAccess().getEnnonceAssignment_3_1(), "rule__Question__EnnonceAssignment_3_1");
			builder.put(grammarAccess.getQuestionAccess().getDifficulteAssignment_4_1(), "rule__Question__DifficulteAssignment_4_1");
			builder.put(grammarAccess.getQuestionAccess().getEtiquetteAssignment_5_2(), "rule__Question__EtiquetteAssignment_5_2");
			builder.put(grammarAccess.getQuestionAccess().getEtiquetteAssignment_5_3_1(), "rule__Question__EtiquetteAssignment_5_3_1");
			builder.put(grammarAccess.getQuestionAccess().getReponseAssignment_8(), "rule__Question__ReponseAssignment_8");
			builder.put(grammarAccess.getQuestionAccess().getReponseAssignment_9_1(), "rule__Question__ReponseAssignment_9_1");
			builder.put(grammarAccess.getEtiquetteAccess().getNomAssignment_3_1(), "rule__Etiquette__NomAssignment_3_1");
			builder.put(grammarAccess.getReponseAccess().getEstVraieAssignment_1(), "rule__Reponse__EstVraieAssignment_1");
			builder.put(grammarAccess.getReponseAccess().getTexteAssignment_4_1(), "rule__Reponse__TexteAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private EduquizzGrammarAccess grammarAccess;

	@Override
	protected InternalEduquizzParser createParser() {
		InternalEduquizzParser result = new InternalEduquizzParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EduquizzGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EduquizzGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
